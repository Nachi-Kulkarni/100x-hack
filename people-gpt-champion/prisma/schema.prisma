// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  email     String   @unique
  phone     String?
  address   String?
  linkedinUrl String?
  githubUrl   String?
  resumeText  String?
  skills    Json?    // Store as JSON array of strings
  workExperience Json?
  education Json?
  certifications Json?
  vectorEmbedding Bytes? // For Pinecone or pgvector
  rankings  Ranking[]
  outreaches OutreachLog[]
  emailOutreaches EmailOutreach[] // Relation to specific A/B test email outreaches
  gender    String?  // Added field for gender
  ethnicity String?  // Added field for ethnicity
}

model Query {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  queryText String
  filters   Json?
  rankings  Ranking[]
}

model Ranking {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  query       Query    @relation(fields: [queryId], references: [id])
  queryId     String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  rank        Int
  score       Float
  reason      String?
  @@unique([queryId, candidateId])
}

model OutreachLog {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  channel     String   // e.g., "email", "linkedin"
  status      String   // e.g., "sent", "opened", "replied", "failed"
  errorMessage String?
  sentAt      DateTime?
  openedAt    DateTime?
  repliedAt   DateTime?
}

model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String?  // User performing the action, if applicable
  action    String   // e.g., "create_candidate", "run_query", "send_outreach"
  details   Json?    // Additional details about the action
  entity    String?  // e.g., "Candidate", "Query"
  entityId  String?
  user      User?    @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  RECRUITER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  auditLogs     AuditLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FeatureFlag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String   @unique // The flag key used in code, e.g., "streamingSearch"
  value     Boolean  // true for on, false for off
  description String?
}

// Models for A/B Testing Email Templates
model EmailTemplate {
  id        String   @id @default(cuid())
  name      String   @unique // e.g., "Intro Email Q1" - made unique for easier lookup
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  versions  EmailTemplateVersion[]
}

model EmailTemplateVersion {
  id              String   @id @default(cuid())
  templateId      String
  template        EmailTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade) // Ensure cascade delete if a template is removed
  subject         String
  body            String   @db.Text // Use Text type for potentially long HTML bodies
  versionNumber   Int
  isArchived      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt // Added for tracking updates to a version
  outreaches      EmailOutreach[]

  @@unique([templateId, versionNumber])
  @@index([templateId]) // Index for faster queries on templateId
}

model EmailOutreach {
  id                String   @id @default(cuid())
  templateVersionId String
  templateVersion   EmailTemplateVersion @relation(fields: [templateVersionId], references: [id])
  recipientEmail    String
  sentAt            DateTime @default(now())
  resendMessageId   String   @unique // From Resend response, for webhook matching
  status            String   @default("sent") // e.g., "sent", "delivered", "opened", "clicked", "bounced", "complained"
  openedAt          DateTime?
  clickedAt         DateTime?

  // Link to Candidate (optional)
  candidateId       String?     @map("candidate_id")
  candidate         Candidate?  @relation(fields: [candidateId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([templateVersionId])
  @@index([resendMessageId]) // Index for faster webhook lookups
  @@index([candidateId])     // Index for the new foreign key
}
